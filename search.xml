<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人博客搭建操作流程</title>
      <link href="/2021/08/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建操作流程"><a href="#个人博客搭建操作流程" class="headerlink" title="个人博客搭建操作流程"></a>个人博客搭建操作流程</h1><p>本系列将记录自己按照网络上的资源与教程第一次搭建自己的个人博客的全过程，将过程与自己搭建时的心得记录下来，为以后反看自己成长经历留下痕迹，也希望如果可以的话，帮助到其他想要尝试搭建自己个人博客的朋友。</p><p><strong>本文基于Windows 10系统，且默认已有GitHub账号以及安装下载好git。</strong></p><p>若还没有GitHub账号，可参考这篇博文注册 <a href="https://blog.csdn.net/qq_41782425/article/details/85179912?ops_request_misc=&request_id=&biz_id=102&utm_term=github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">最新GitHub账号注册（详细图解——CSDN。</a></p><p>git的下载安装可参考这篇博文进行下载安装 <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%7B%22request_id%22:%22162902395616780274116656%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162902395616780274116656&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833.first_rank_v2_pc_rank_v29&utm_term=git%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">Git 详细安装教程（详解 Git 安装过程的每一个步骤）——CSDN</a>。</p><h2 id="绑定-GitHub"><a href="#绑定-GitHub" class="headerlink" title="绑定 GitHub"></a>绑定 GitHub</h2><p>为了方便向GitHub的仓库上传文件，我利用SSH（安全外壳协议，Secure Shell 的缩写）绑定GitHub并提交文件，这样既方便快捷，又安全可靠。详细了解SSH协议可参考这篇文章 <a href="https://blog.csdn.net/qq_35246620/article/details/54317740">详述 SSH 的原理及其应用——CSDN</a>。</p><h3 id="1-绑定GitHub"><a href="#1-绑定GitHub" class="headerlink" title="1. 绑定GitHub"></a>1. 绑定GitHub</h3><p>利用git上传文件到GitHub首先得利用SSH登录远程主机，有两种登录方式：口令登录和公钥登录。口令登录需每次输入密码，较为麻烦，公钥登录省去了输入密码的步骤，更为快捷方便一些。所以我才用了公钥登录的方式。</p><p>首先需要在GitHub上添加 SSH key 配置，如果已经安装好 Git Bash，应该会自带有SSH，可以在Git Bash中输入 ssh 命令来检查一下本机是否安装。</p><p><img src="https://img-blog.csdnimg.cn/23f693f416d048d88f7a91177ea7e276.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c11147af1c1c4d12967c6ff8a1ad4e2d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上图所示，即已经成功安装 SSH。</p><p>接着输入命令 <strong>ssh-keygen -t rsa</strong> （注意空格），表示指定 RSA 算法生成密钥，然后按四次回车键，会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. 根据 Git Bash 上显示的目录找到所述文件。<em>（注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）</em></p><p><img src="https://img-blog.csdnimg.cn/1a5931f0f2c84c449e0b65a576e0459c.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>如果根据目录找不到也没关系，可以直接在 Git Bash 中输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh </span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>接下来我们要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，进入到自己的 GitHub 主页，点击右上角的头像，再找到 <strong>Setting</strong> 点击。</p><p><img src="https://img-blog.csdnimg.cn/55cc64dcd26945d38ac56ca608ed0af9.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>如下图，先点击 <em><strong>SSH and GPG keys</strong></em>，再点击 <em><strong>New SSH key。</strong></em></p><p><img src="https://img-blog.csdnimg.cn/45f01ffb94d745b0a9942d462ee4d54d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ITLGI3EM-1629089994573)(C:\Users\79485\Pictures\个人博客流程\QQ截图20210815194146.jpg)]"></p><p>将刚才复制的公钥填写到下面 <em><strong>Key</strong></em> 的大框里，上面是标题，可填可不填，最后点击下面的 <em><strong>Add SSH key</strong></em> 。</p><p><img src="https://img-blog.csdnimg.cn/2f7c5b67f2ca440fa92434ba56c50574.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后我们可以通过Git Bash 中输入 ssh -T <a href="mailto:git@github.com">git@github.com</a> 进行检验是否验证成功，第一次会询问，填写 yes，回车就好。</p><p><img src="https://img-blog.csdnimg.cn/9c5fdba9e3254953a16876f0a84cb9db.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><h3 id="2-提交文件"><a href="#2-提交文件" class="headerlink" title="2. 提交文件"></a>2. 提交文件</h3><p>提交文件有两种方法：</p><p><strong>① 本地没有 git 仓库</strong></p><blockquote><ol><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ol></blockquote><p><strong>② 本地有 Git 仓库，并且已经进行了多次 commit 操作</strong></p><blockquote><ol><li>建立一个本地仓库进入，init 初始化；</li><li>关联远程仓库；</li><li>同步远程仓库和本地仓库；</li><li>将文件添加提交到本地仓库；</li><li>将本地仓库的内容 push 到远程仓库。</li></ol></blockquote><p>下面展开详细讲解一下两种方法如何使用：</p><p><strong>① 本地没有 git 仓库</strong>：</p><p>首先进入自己的 GitHub 主页，创建一个新项目，我这里将新项目命名为《First-Demo》，点击进入</p><p><img src="https://img-blog.csdnimg.cn/836e781e8c2a453eb6e6a35bebc37cb0.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击 <strong>Code</strong>，再点击<strong>SSH</strong>，点击网址后面的复制图标将路径复制。</p><p><img src="https://img-blog.csdnimg.cn/a234dc46ec654028a9bf74ad004511d2.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后打开 Git Bash 进入到自己准备存储 Git 仓库的目录</p><p><img src="https://img-blog.csdnimg.cn/06ad7f9da5af4f74aae33d7a35213ae7.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>这里进入是时我出现了 “bash: cd: too many arguments” 的错误，是因为路径中包含了空格导致的，只需要将路径中有空格的部分用双引号包起来就可以解决了。</p><p><img src="https://img-blog.csdnimg.cn/4780aadb5c08492a99e03c2c06ce3032.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样就进入到仓库所在目录，然后运行命令git clone <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109;</a>:7948…（把刚刚复制的地址粘贴过来），将远程仓库 clone 到本地。</p><p><img src="https://img-blog.csdnimg.cn/d87b7a828a884677a9542e6f386dac7a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>上图就证明 clone 成功了，我们可以打开仓库所在的目录，检验一下是否 clone 正确，可以看到本地内容与 GitHub 上的内容完全一致。</p><p>接下来我们在本地的仓库新建一个文件，然后从此目录进入 Git Bash，输入 git status 命令查看仓库状态：</p><p><img src="https://img-blog.csdnimg.cn/8304cb3230684b9b9713b1e8589c50cc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>可以看到我们刚刚新建的文件并没有被追踪，现在用 git add 命令将文件添加到「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库，如下图：</p><p><img src="https://img-blog.csdnimg.cn/9e3f926d51424bed8bf33e0cae219e20.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后就可以输入git push origin master 命令，将本地仓库提交到远程仓库，origin是远程主机的名字</p><p><img src="https://img-blog.csdnimg.cn/4ece2d6c127943bb8504ed64d1beaee9.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>此时再看 GitHub主页上仓库里已有我们更新提交的文件了</p><p><img src="https://img-blog.csdnimg.cn/31e99f0bd4354659b56530858c2f6e58.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><hr><p><strong>② 本地有 Git 仓库，并且已经进行了多次 commit 操作</strong></p><p>首先，我们建立一个本地仓库 secondDemo，使用 git init 命令初始化这个仓库</p><p><img src="https://img-blog.csdnimg.cn/2f7afc628a6a4d1fa7b9347287d8fd16.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/2bece6368aaf4616a8d478c1530535fc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>输入 git remote add origin <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:7948…命令，关联远程仓库，接着输入 git pull origin master 命令，同步远程仓库和本地仓库git</p><p><img src="https://img-blog.csdnimg.cn/d71cba02535f4020a75f9134b0822667.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后我们打开本地仓库就可以看到，和远程仓库中的内容一致了，接下来的操作与第①种方法大同小异，add、push、commit等操作。</p><h2 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3. 购买域名"></a>3. 购买域名</h2><p>搭建自己的个人博客网站，当然需要一个专属于自己的域名啦，我本人的域名是在阿里云的<a href="https://wanwang.aliyun.com/">万网</a>购买的，首年还有优惠，先查询一下自己心仪的域名能否使用，接下来需要在阿里云注册账号，就可以购买一个属于自己的域名啦！</p><h2 id="4-安装node-js"><a href="#4-安装node-js" class="headerlink" title="4. 安装node.js"></a>4. 安装node.js</h2><p><strong>更新：</strong></p><p>先下载 nvm (node.js version management)，顾名思义是一个 nodejs 的版本管理工具。通过它可以安装和切换不同版本的 nodejs。方便之后的操作，可以<a href="https://github.com/coreybutler/nvm-windows/releases">点击此处</a>下载 nvm，下载 Windows 版本</p><ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul><p><img src="https://img-blog.csdnimg.cn/b9f502ca52764cbc95d10df188115e31.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>下载好之后一路 next 安装完成，打开 CMD，输入命令 <code>nvm -v</code>，若出现以下界面则证明安装成功：</p><p><img src="https://img-blog.csdnimg.cn/02060ce819aa4ed3a379a9c1a8a8482a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>接下来输入命令 <code>nvm install 14.17.5</code> 即可安装14.17.5版本的 node.js 和 npm。</p><p><img src="https://img-blog.csdnimg.cn/83fda99b528343c48f55a4645a40dd52.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>之后输入命令 <code>nvm use 14.17.5</code>，即可使用该版本的 node 与 npm </p><p><img src="https://img-blog.csdnimg.cn/f00f93cb36b6412997ac5fc302f56e40.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>以下附上常用的 nvm 命令：</p><ol><li><code>nvm arch</code> ：显示node是运行在32位还是64位。</li><li><code>nvm install &lt;version&gt; [arch]</code> ：安装node， version是特定版本也可以是最新稳定版本latest。可选参数arch指定安装32位还是64位版本，默认是系统位数。可以添加–insecure绕过远程服务器的SSL。</li><li><code>nvm list [available]</code> ：显示已安装的列表。可选参数available，显示可安装的所有版本。list可简化为ls。</li><li><code>nvm on</code> ：开启node.js版本管理。</li><li><code>nvm off</code> ：关闭node.js版本管理。</li><li><code>nvm proxy [url]</code> ：设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</li><li><code>nvm node_mirror [url]</code> ：设置node镜像。默认是<a href="https://nodejs.org/dist/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm npm_mirror [url] </code>：设置npm镜像。<a href="https://github.com/npm/cli/archive/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm uninstall &lt;version&gt; </code>：卸载指定版本node。</li><li><code>nvm use [version] [arch] </code>：使用制定版本node。可指定32/64位。</li><li><code>nvm root [path] </code>：设置存储不同版本node的目录。如果未设置，默认使用当前目录。</li><li><code>nvm version</code> ：显示nvm版本。version可简化为v。</li></ol><p><strong>旧：</strong></p><p>下载地址：<a href="https://nodejs.org/en/">node.js官网</a><br><img src="https://img-blog.csdnimg.cn/9c601d6efeed45caa862671a8fbe1010.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><br>点击左面的按钮下载，点击安装包进行安装，详细的安装过程以及环境变量的配置可以参考这篇文章<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a></p><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5. 安装Hexo"></a>5. 安装Hexo</h2><p>Hexo就是我个人博客网站的框架，在安装前，先在 GitHub 新建一个仓库</p><p><img src="https://img-blog.csdnimg.cn/78f7bc90e86340c68ee17ad6fe302759.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>仓库名称设置为“用户名+github.io”</p><p><img src="https://img-blog.csdnimg.cn/9134716315bc485a8ec6c6c727ee667a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后就是安装 Hexo 了，首先在D盘新建文件夹“Blog”，打开命令行进入“D:\Blog” ，然后输入命令安装 Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7a720eb084c64223a4ee61b80dc6f9a1.jpg"></p><p>安装完成后输入 hexo init 命令初始化博客：</p><p><img src="https://img-blog.csdnimg.cn/84203529006b417e8b3d4e9e30c5ae1a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后输入 hexo g 静态部署：</p><p><img src="https://img-blog.csdnimg.cn/8071ad0c2ac547a8a96e248fe7ddc57a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>这时网页已经部署完成，输入 hexo s 命令可以查看：</p><p><img src="https://img-blog.csdnimg.cn/e4597eeabae141b48a1693b824138d70.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>在浏览器输入 <a href="https://link.zhihu.com/?target=http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%80%E5%8E%9F%E5%A7%8B%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86">http://localhost:4000</a> 就可以打开新部署的网页啦：</p><p><img src="https://img-blog.csdnimg.cn/453a30b0459e41c5bebd947512a231c2.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>最后记得要ctrl + c 停止运行服务器。</p><h2 id="6-将-Hexo-部署到-GitHub"><a href="#6-将-Hexo-部署到-GitHub" class="headerlink" title="6. 将 Hexo 部署到 GitHub"></a>6. 将 Hexo 部署到 GitHub</h2><p>在Blog文件夹中找到_config.yml文件，用记事本打开，下滑到最底部，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/mayByt/mayByt.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6536140ad8c34358ba76c08283f6e82d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>仓库地址在这里：</p><p><img src="https://img-blog.csdnimg.cn/3a36b6fb93ca4ae9bfd08a2effbd6291.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后还是在命令行中进入D:/Blog，安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后分别输入以下三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>完成以后，打开浏览器，输入 <a href="https://maybyt.github.io/">https://xxx.github.io </a>就可以打开你的网页了：</p><p><img src="https://img-blog.csdnimg.cn/04498f7cfd2e4a8c91ce51d3ab8623df.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><h2 id="7-解析域名"><a href="#7-解析域名" class="headerlink" title="7. 解析域名"></a>7. 解析域名</h2><p>到了这一步，虽然已经可以通过 GitHub 提供的网址访问我们的网页，但是我们想要通过之前购买的专属自己域名来访问，接下来就是绑定自己的域名。</p><p>第一步：首先需要<strong>解析域名</strong>，登陆<a href="https://www.aliyun.com/?spm=5176.12818093.top-nav.dlogo.2c8d16d0eepCRp">万网</a>后点击控制台进入域名控制台，在你购买的域名后点击 <em><strong>解析</strong></em> ：</p><p><img src="https://img-blog.csdnimg.cn/6eb5e020fa2f4110bc95d263787b1708.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>之后添加两条解析记录，内容如下：</p><p><img src="https://img-blog.csdnimg.cn/38824c7afd0c4a06b954f2339cf8c571.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>其中第一条那个IPV4地址可以通过ping得到，具体方法是：打开cmd输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping mayByt.github.io    #ping + 你的GitHub的网址</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/197b2593a0084683b7fadc26aab0e97a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>第二步：打开 Blog 文件夹里的 source 文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除，如下图：</p><p><img src="https://img-blog.csdnimg.cn/e07c7b98da50474690284fe703c9aa43.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/e0931e08dbbe4c3f9643f8d3031a21a4.jpg"></p><p>第三步：打开 Blog文件夹，右键打开 Git Bash，依次输入下面三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>接着等待执行完毕后，打开 GitHub 上仓库，可以看到CNAME文件已经在项目中了，接着点击 <em><strong>Setting</strong></em> ，打开 <em><strong>Pages</strong></em> ,查看自己的域名已经被保存了。</p><p><img src="https://img-blog.csdnimg.cn/0b640d1355b145a9a7d0bc1b73922184.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><br>现在，就可以直接在网址栏输入自己的域名访问自己的博客主页啦。</p><p>至此个人网站搭建好了，接下来要做的就是美化个性化定制自己的网站了，我个人博客的制作过程将在下一篇文章中记录。</p><hr><p>更新~</p><p>因为 Hexo 是生成好静态网页上传 git ，这样导致在其他设备上无法自由更新编辑自己的网站，并且源代码无法上传 git ，一旦本机数据发生意外，可能导致自己的网站心血付之东流，因此为我的个人博客添加 git 版本管理。</p><p>首先在 GitHub 新建一个 <em><strong>Blog</strong></em> 仓库：</p><p>[]</p><p>然后在本地的网站根目录 <em><strong>Blog</strong></em> 下的 <em><strong>.gitignore</strong></em>文件（若没有则新建一个）里添加git时忽略的文件，一般是一些编辑器的配置文件等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">.idea/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>接着初始化 git 仓库，在本文件夹下 Git Bash 以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>添加当前目录下的所有文件到暂存区：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交初始化仓库到本地：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;初始化仓库&quot;</span></span><br></pre></td></tr></table></figure><p>接着推送到远程的仓库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="literal">-M</span> main</span><br><span class="line">git remote add origin https://github.com/mayByt/blog.git</span><br><span class="line">git push <span class="literal">-u</span> origin main</span><br></pre></td></tr></table></figure><p>这样就操作完成啦，就不用担心会遗失自己的源代码，并且可以多终端编辑自己的网站啦~</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
