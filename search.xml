<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人博客搭建操作流程</title>
      <link href="/2021/08/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建操作流程"><a href="#个人博客搭建操作流程" class="headerlink" title="个人博客搭建操作流程"></a>个人博客搭建操作流程</h1><p>本系列将记录自己按照网络上的资源与教程第一次搭建自己的个人博客的全过程，将过程与自己搭建时的心得记录下来，为以后反看自己成长经历留下痕迹，也希望如果可以的话，帮助到其他想要尝试搭建自己个人博客的朋友。</p><p><strong>本文基于Windows 10系统，且默认已有GitHub账号以及安装下载好git。</strong></p><p>若还没有GitHub账号，可参考这篇博文注册 <a href="https://blog.csdn.net/qq_41782425/article/details/85179912?ops_request_misc=&request_id=&biz_id=102&utm_term=github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">最新GitHub账号注册（详细图解——CSDN。</a></p><p>git的下载安装可参考这篇博文进行下载安装 <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%7B%22request_id%22:%22162902395616780274116656%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162902395616780274116656&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833.first_rank_v2_pc_rank_v29&utm_term=git%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">Git 详细安装教程（详解 Git 安装过程的每一个步骤）——CSDN</a>。</p><h2 id="绑定-GitHub"><a href="#绑定-GitHub" class="headerlink" title="绑定 GitHub"></a>绑定 GitHub</h2><p>为了方便向GitHub的仓库上传文件，我利用SSH（安全外壳协议，Secure Shell 的缩写）绑定GitHub并提交文件，这样既方便快捷，又安全可靠。详细了解SSH协议可参考这篇文章 <a href="https://blog.csdn.net/qq_35246620/article/details/54317740">详述 SSH 的原理及其应用——CSDN</a>。</p><h3 id="1-绑定GitHub"><a href="#1-绑定GitHub" class="headerlink" title="1. 绑定GitHub"></a>1. 绑定GitHub</h3><p>利用git上传文件到GitHub首先得利用SSH登录远程主机，有两种登录方式：口令登录和公钥登录。口令登录需每次输入密码，较为麻烦，公钥登录省去了输入密码的步骤，更为快捷方便一些。所以我才用了公钥登录的方式。</p><p>首先需要在GitHub上添加 SSH key 配置，如果已经安装好 Git Bash，应该会自带有SSH，可以在Git Bash中输入 ssh 命令来检查一下本机是否安装。</p><p><img src="https://img-blog.csdnimg.cn/23f693f416d048d88f7a91177ea7e276.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c11147af1c1c4d12967c6ff8a1ad4e2d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上图所示，即已经成功安装 SSH。</p><p>接着输入命令 <strong>ssh-keygen -t rsa</strong> （注意空格），表示指定 RSA 算法生成密钥，然后按四次回车键，会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. 根据 Git Bash 上显示的目录找到所述文件。<em>（注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）</em></p><p><img src="https://img-blog.csdnimg.cn/1a5931f0f2c84c449e0b65a576e0459c.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>如果根据目录找不到也没关系，可以直接在 Git Bash 中输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh </span><br><span class="line">$ ls</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>接下来我们要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，进入到自己的 GitHub 主页，点击右上角的头像，再找到 <strong>Setting</strong> 点击。</p><p><img src="https://img-blog.csdnimg.cn/55cc64dcd26945d38ac56ca608ed0af9.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>如下图，先点击 <em><strong>SSH and GPG keys</strong></em>，再点击 <em><strong>New SSH key。</strong></em></p><p><img src="https://img-blog.csdnimg.cn/45f01ffb94d745b0a9942d462ee4d54d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ITLGI3EM-1629089994573)(C:\Users\79485\Pictures\个人博客流程\QQ截图20210815194146.jpg)]"></p><p>将刚才复制的公钥填写到下面 <em><strong>Key</strong></em> 的大框里，上面是标题，可填可不填，最后点击下面的 <em><strong>Add SSH key</strong></em> 。</p><p><img src="https://img-blog.csdnimg.cn/2f7c5b67f2ca440fa92434ba56c50574.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后我们可以通过Git Bash 中输入 ssh -T <a href="mailto:git@github.com">git@github.com</a> 进行检验是否验证成功，第一次会询问，填写 yes，回车就好。</p><p><img src="https://img-blog.csdnimg.cn/9c5fdba9e3254953a16876f0a84cb9db.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><h3 id="2-提交文件"><a href="#2-提交文件" class="headerlink" title="2. 提交文件"></a>2. 提交文件</h3><p>提交文件有两种方法：</p><p><strong>① 本地没有 git 仓库</strong></p><blockquote><ol><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ol></blockquote><p><strong>② 本地有 Git 仓库，并且已经进行了多次 commit 操作</strong></p><blockquote><ol><li>建立一个本地仓库进入，init 初始化；</li><li>关联远程仓库；</li><li>同步远程仓库和本地仓库；</li><li>将文件添加提交到本地仓库；</li><li>将本地仓库的内容 push 到远程仓库。</li></ol></blockquote><p>下面展开详细讲解一下两种方法如何使用：</p><p><strong>① 本地没有 git 仓库</strong>：</p><p>首先进入自己的 GitHub 主页，创建一个新项目，我这里将新项目命名为《First-Demo》，点击进入</p><p><img src="https://img-blog.csdnimg.cn/836e781e8c2a453eb6e6a35bebc37cb0.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击 <strong>Code</strong>，再点击<strong>SSH</strong>，点击网址后面的复制图标将路径复制。</p><p><img src="https://img-blog.csdnimg.cn/a234dc46ec654028a9bf74ad004511d2.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后打开 Git Bash 进入到自己准备存储 Git 仓库的目录</p><p><img src="https://img-blog.csdnimg.cn/06ad7f9da5af4f74aae33d7a35213ae7.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>这里进入是时我出现了 “bash: cd: too many arguments” 的错误，是因为路径中包含了空格导致的，只需要将路径中有空格的部分用双引号包起来就可以解决了。</p><p><img src="https://img-blog.csdnimg.cn/4780aadb5c08492a99e03c2c06ce3032.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样就进入到仓库所在目录，然后运行命令git clone <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:7948…（把刚刚复制的地址粘贴过来），将远程仓库 clone 到本地。</p><p><img src="https://img-blog.csdnimg.cn/d87b7a828a884677a9542e6f386dac7a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>上图就证明 clone 成功了，我们可以打开仓库所在的目录，检验一下是否 clone 正确，可以看到本地内容与 GitHub 上的内容完全一致。</p><p>接下来我们在本地的仓库新建一个文件，然后从此目录进入 Git Bash，输入 git status 命令查看仓库状态：</p><p><img src="https://img-blog.csdnimg.cn/8304cb3230684b9b9713b1e8589c50cc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>可以看到我们刚刚新建的文件并没有被追踪，现在用 git add 命令将文件添加到「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库，如下图：</p><p><img src="https://img-blog.csdnimg.cn/9e3f926d51424bed8bf33e0cae219e20.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后就可以输入git push origin master 命令，将本地仓库提交到远程仓库，origin是远程主机的名字</p><p><img src="https://img-blog.csdnimg.cn/4ece2d6c127943bb8504ed64d1beaee9.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>此时再看 GitHub主页上仓库里已有我们更新提交的文件了</p><p><img src="https://img-blog.csdnimg.cn/31e99f0bd4354659b56530858c2f6e58.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><hr><p><strong>② 本地有 Git 仓库，并且已经进行了多次 commit 操作</strong></p><p>首先，我们建立一个本地仓库 secondDemo，使用 git init 命令初始化这个仓库</p><p><img src="https://img-blog.csdnimg.cn/2f7afc628a6a4d1fa7b9347287d8fd16.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/2bece6368aaf4616a8d478c1530535fc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>输入 git remote add origin <a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a>:7948…命令，关联远程仓库，接着输入 git pull origin master 命令，同步远程仓库和本地仓库git</p><p><img src="https://img-blog.csdnimg.cn/d71cba02535f4020a75f9134b0822667.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后我们打开本地仓库就可以看到，和远程仓库中的内容一致了，接下来的操作与第①种方法大同小异，add、push、commit等操作。</p><h2 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3. 购买域名"></a>3. 购买域名</h2><p>搭建自己的个人博客网站，当然需要一个专属于自己的域名啦，我本人的域名是在阿里云的<a href="https://wanwang.aliyun.com/">万网</a>购买的，首年还有优惠，先查询一下自己心仪的域名能否使用，接下来需要在阿里云注册账号，就可以购买一个属于自己的域名啦！</p><h2 id="4-安装node-js"><a href="#4-安装node-js" class="headerlink" title="4. 安装node.js"></a>4. 安装node.js</h2><p><strong>更新：</strong></p><p>先下载 nvm (node.js version management)，顾名思义是一个 nodejs 的版本管理工具。通过它可以安装和切换不同版本的 nodejs。方便之后的操作，可以<a href="https://github.com/coreybutler/nvm-windows/releases">点击此处</a>下载 nvm，下载 Windows 版本</p><ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul><p><img src="https://img-blog.csdnimg.cn/b9f502ca52764cbc95d10df188115e31.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>下载好之后一路 next 安装完成，打开 CMD，输入命令 <code>nvm -v</code>，若出现以下界面则证明安装成功：</p><p><img src="https://img-blog.csdnimg.cn/02060ce819aa4ed3a379a9c1a8a8482a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>接下来输入命令 <code>nvm install 14.17.5</code> 即可安装14.17.5版本的 node.js 和 npm。</p><p><img src="https://img-blog.csdnimg.cn/83fda99b528343c48f55a4645a40dd52.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>之后输入命令 <code>nvm use 14.17.5</code>，即可使用该版本的 node 与 npm </p><p><img src="https://img-blog.csdnimg.cn/f00f93cb36b6412997ac5fc302f56e40.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>以下附上常用的 nvm 命令：</p><ol><li><code>nvm arch</code> ：显示node是运行在32位还是64位。</li><li><code>nvm install &lt;version&gt; [arch]</code> ：安装node， version是特定版本也可以是最新稳定版本latest。可选参数arch指定安装32位还是64位版本，默认是系统位数。可以添加–insecure绕过远程服务器的SSL。</li><li><code>nvm list [available]</code> ：显示已安装的列表。可选参数available，显示可安装的所有版本。list可简化为ls。</li><li><code>nvm on</code> ：开启node.js版本管理。</li><li><code>nvm off</code> ：关闭node.js版本管理。</li><li><code>nvm proxy [url]</code> ：设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</li><li><code>nvm node_mirror [url]</code> ：设置node镜像。默认是<a href="https://nodejs.org/dist/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm npm_mirror [url] </code>：设置npm镜像。<a href="https://github.com/npm/cli/archive/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm uninstall &lt;version&gt; </code>：卸载指定版本node。</li><li><code>nvm use [version] [arch] </code>：使用制定版本node。可指定32/64位。</li><li><code>nvm root [path] </code>：设置存储不同版本node的目录。如果未设置，默认使用当前目录。</li><li><code>nvm version</code> ：显示nvm版本。version可简化为v。</li></ol><p><strong>旧：</strong></p><p>下载地址：<a href="https://nodejs.org/en/">node.js官网</a><br><img src="https://img-blog.csdnimg.cn/9c601d6efeed45caa862671a8fbe1010.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><br>点击左面的按钮下载，点击安装包进行安装，详细的安装过程以及环境变量的配置可以参考这篇文章<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a></p><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5. 安装Hexo"></a>5. 安装Hexo</h2><p>Hexo就是我个人博客网站的框架，在安装前，先在 GitHub 新建一个仓库</p><p><img src="https://img-blog.csdnimg.cn/78f7bc90e86340c68ee17ad6fe302759.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>仓库名称设置为“用户名+github.io”</p><p><img src="https://img-blog.csdnimg.cn/9134716315bc485a8ec6c6c727ee667a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后就是安装 Hexo 了，首先在D盘新建文件夹“Blog”，打开命令行进入“D:\Blog” ，然后输入命令安装 Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7a720eb084c64223a4ee61b80dc6f9a1.jpg"></p><p>安装完成后输入 hexo init 命令初始化博客：</p><p><img src="https://img-blog.csdnimg.cn/84203529006b417e8b3d4e9e30c5ae1a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后输入 hexo g 静态部署：</p><p><img src="https://img-blog.csdnimg.cn/8071ad0c2ac547a8a96e248fe7ddc57a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>这时网页已经部署完成，输入 hexo s 命令可以查看：</p><p><img src="https://img-blog.csdnimg.cn/e4597eeabae141b48a1693b824138d70.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>在浏览器输入 <a href="https://link.zhihu.com/?target=http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%80%E5%8E%9F%E5%A7%8B%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86">http://localhost:4000</a> 就可以打开新部署的网页啦：</p><p><img src="https://img-blog.csdnimg.cn/453a30b0459e41c5bebd947512a231c2.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>最后记得要ctrl + c 停止运行服务器。</p><h2 id="6-将-Hexo-部署到-GitHub"><a href="#6-将-Hexo-部署到-GitHub" class="headerlink" title="6. 将 Hexo 部署到 GitHub"></a>6. 将 Hexo 部署到 GitHub</h2><p>在Blog文件夹中找到_config.yml文件，用记事本打开，下滑到最底部，添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/mayByt/mayByt.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6536140ad8c34358ba76c08283f6e82d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>仓库地址在这里：</p><p><img src="https://img-blog.csdnimg.cn/3a36b6fb93ca4ae9bfd08a2effbd6291.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>然后还是在命令行中进入D:/Blog，安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后分别输入以下三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>完成以后，打开浏览器，输入 <a href="https://maybyt.github.io/">https://xxx.github.io </a>就可以打开你的网页了：</p><p><img src="https://img-blog.csdnimg.cn/04498f7cfd2e4a8c91ce51d3ab8623df.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><h2 id="7-解析域名"><a href="#7-解析域名" class="headerlink" title="7. 解析域名"></a>7. 解析域名</h2><p>到了这一步，虽然已经可以通过 GitHub 提供的网址访问我们的网页，但是我们想要通过之前购买的专属自己域名来访问，接下来就是绑定自己的域名。</p><p>第一步：首先需要<strong>解析域名</strong>，登陆<a href="https://www.aliyun.com/?spm=5176.12818093.top-nav.dlogo.2c8d16d0eepCRp">万网</a>后点击控制台进入域名控制台，在你购买的域名后点击 <em><strong>解析</strong></em> ：</p><p><img src="https://img-blog.csdnimg.cn/6eb5e020fa2f4110bc95d263787b1708.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>之后添加两条解析记录，内容如下：</p><p><img src="https://img-blog.csdnimg.cn/38824c7afd0c4a06b954f2339cf8c571.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>其中第一条那个IPV4地址可以通过ping得到，具体方法是：打开cmd输入下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping mayByt.github.io    #ping + 你的GitHub的网址</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/197b2593a0084683b7fadc26aab0e97a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p><p>第二步：打开 Blog 文件夹里的 source 文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除，如下图：</p><p><img src="https://img-blog.csdnimg.cn/e07c7b98da50474690284fe703c9aa43.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/e0931e08dbbe4c3f9643f8d3031a21a4.jpg"></p><p>第三步：打开 Blog文件夹，右键打开 Git Bash，依次输入下面三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>接着等待执行完毕后，打开 GitHub 上仓库，可以看到CNAME文件已经在项目中了，接着点击 <em><strong>Setting</strong></em> ，打开 <em><strong>Pages</strong></em> ,查看自己的域名已经被保存了。</p><p><img src="https://img-blog.csdnimg.cn/0b640d1355b145a9a7d0bc1b73922184.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"><br>现在，就可以直接在网址栏输入自己的域名访问自己的博客主页啦。</p><p>至此个人网站搭建好了，接下来要做的就是美化个性化定制自己的网站了，我个人博客的制作过程将在下一篇文章中记录。</p><hr><p>更新~</p><p>因为 Hexo 是生成好静态网页上传 git ，这样导致在其他设备上无法自由更新编辑自己的网站，并且源代码无法上传 git ，一旦本机数据发生意外，可能导致自己的网站心血付之东流，因此为我的个人博客添加 git 版本管理。</p><p>首先在 GitHub 新建一个 <em><strong>Blog</strong></em> 仓库：</p><p>[]</p><p>然后在本地的网站根目录 <em><strong>Blog</strong></em> 下的 <em><strong>.gitignore</strong></em>文件（若没有则新建一个）里添加git时忽略的文件，一般是一些编辑器的配置文件等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">.idea/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><p>接着初始化 git 仓库，在本文件夹下 Git Bash 以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>添加当前目录下的所有文件到暂存区：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>提交初始化仓库到本地：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;初始化仓库&quot;</span></span><br></pre></td></tr></table></figure><p>接着推送到远程的仓库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="literal">-M</span> main</span><br><span class="line">git remote add origin https://github.com/mayByt/blog.git</span><br><span class="line">git push <span class="literal">-u</span> origin main</span><br></pre></td></tr></table></figure><p>这样就操作完成啦，就不用担心会遗失自己的源代码，并且可以多终端编辑自己的网站啦~</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-027 出租</title>
      <link href="/2021/08/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-027%20%E5%87%BA%E7%A7%9F/"/>
      <url>/2021/08/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-027%20%E5%87%BA%E7%A7%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-027-出租"><a href="#PTA团队天梯赛║L1-027-出租" class="headerlink" title="PTA团队天梯赛║L1-027 出租"></a>PTA团队天梯赛║L1-027 <strong>出租</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>下面是新浪微博上曾经很火的一张图：<br><img src="https://img-blog.csdnimg.cn/5f46c5bd115c468ba89f77aed0885be7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一时间网上一片求救声，急问这个怎么破。其实这段代码很简单，<code>index</code>数组就是<code>arr</code>数组的下标，<code>index[0]=2</code> 对应 <code>arr[2]=1</code>，<code>index[1]=0</code> 对应 <code>arr[0]=8</code>，<code>index[2]=3</code> 对应 <code>arr[3]=0</code>，以此类推…… 很容易得到电话号码是<code>18013820100</code>。</p><p>本题要求你编写一个程序，为任何一个电话号码生成这段代码 —— 事实上，只要生成最前面两行就可以了，后面内容是不变的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个由11位数字组成的手机号码。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>为输入的号码生成代码的前两行，其中<code>arr</code>中的数字必须按递减顺序给出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18013820100</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[]&#123;8,3,2,1,0&#125;;</span><br><span class="line">int[] index = new int[]&#123;3,0,4,3,1,0,2,4,3,4,4&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>创建一个整型数组a[10]存放 <code>0~9</code> 在号码中出现的次数，写入字符串，将每一位上的字符转为数字后直接作为数组a的下标，让该位置上数量加一，统计出每个数字的出现次数。新建数组arr[10]，将数组a中非零的元素下标降序写入arr数组，输出。然后挨个比对号码每一位上的数字与arr数组中的数字，若匹配则输出下标。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[s[i]-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>], num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[num] = i;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;int[] arr = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;num<span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;int[] index = new int[]&#123;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]-<span class="string">&#x27;0&#x27;</span>==arr[j]) cout &lt;&lt; j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">10</span>) cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&#125;;&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>在比较字符串 s 每一位与数组 arr 是否匹配时，忘记将字符转化为整型数，导致结果出错，谨记在比较时，两边的数据类型是否相同？</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构MOOC课后习题 02-线性结构1 两个有序链表序列的合并（函数题）</title>
      <link href="/2021/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2002-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%841%20%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6%EF%BC%88%E5%87%BD%E6%95%B0%E9%A2%98%EF%BC%89/"/>
      <url>/2021/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2002-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%841%20%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E5%BA%8F%E5%88%97%E7%9A%84%E5%90%88%E5%B9%B6%EF%BC%88%E5%87%BD%E6%95%B0%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="02-线性结构1-两个有序链表序列的合并（函数题）"><a href="#02-线性结构1-两个有序链表序列的合并（函数题）" class="headerlink" title="02-线性结构1 两个有序链表序列的合并（函数题）"></a><strong>02-线性结构1 两个有序链表序列的合并</strong>（函数题）</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Merge</span><span class="params">( List L1, List L2 )</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>List</code>结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure><p><code>L1</code>和<code>L2</code>是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数<code>Merge</code>要将<code>L1</code>和<code>L2</code>合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Read</span><span class="params">()</span></span>; <span class="comment">/* 细节在此不表 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">( List L )</span></span>; <span class="comment">/* 细节在此不表；空链表将输出NULL */</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Merge</span><span class="params">( List L1, List L2 )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L1, L2, L;</span><br><span class="line">    L1 = <span class="built_in">Read</span>();</span><br><span class="line">    L2 = <span class="built_in">Read</span>();</span><br><span class="line">    L = <span class="built_in">Merge</span>(L1, L2);</span><br><span class="line">    <span class="built_in">Print</span>(L);</span><br><span class="line">    <span class="built_in">Print</span>(L1);</span><br><span class="line">    <span class="built_in">Print</span>(L2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 5</span><br><span class="line">5</span><br><span class="line">2 4 6 8 10</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10 </span><br><span class="line">NULL</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Merge</span><span class="params">( List L1, List L2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L = (List)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(struct Node));</span><br><span class="line">    List tempL1 = L1-&gt;Next, tempL2 = L2-&gt;Next;</span><br><span class="line">    List head = L;  <span class="comment">// 合并后链表L的头结点</span></span><br><span class="line">    <span class="keyword">while</span>(tempL1 &amp;&amp; tempL2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tempL1-&gt;Data &lt;= tempL2-&gt;Data)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;Next = tempL1;</span><br><span class="line">            tempL1 = tempL1-&gt;Next;</span><br><span class="line">            L = L-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;Next = tempL2;</span><br><span class="line">            tempL2 = tempL2-&gt;Next;</span><br><span class="line">            L = L-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;Next = tempL1 ? tempL1 : tempL2; <span class="comment">// 若一个链表遍历完成，则将另一个链表剩余部分直接接到合并后链表</span></span><br><span class="line">    L1-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    L2-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>合并链表的操作重点就是将较小链表节点（此处记为tempL）插入到合并链表之后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> L-&gt;Next = tempL;</span><br><span class="line"><span class="number">2.</span> tempL = tempL-&gt;Next;</span><br><span class="line"><span class="number">3.</span> L = L-&gt;Next;</span><br></pre></td></tr></table></figure><p>直到一个链表遍历完，此时将另一链表剩余部分全部接到合并链表尾：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L-&gt;Next = tempL1 ? tempL1 : tempL2;</span><br></pre></td></tr></table></figure><p>在题目的输出样例中，L1 和 L2打印均为 NULL，因此，在函数最后将 L1-&gt;Next 和 L2-&gt;Next 全部置为NULL。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构MOOC课后习题 01-复杂度3 二分查找 （函数题）</title>
      <link href="/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A63%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%20%EF%BC%88%E5%87%BD%E6%95%B0%E9%A2%98%EF%BC%89/"/>
      <url>/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A63%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%20%EF%BC%88%E5%87%BD%E6%95%B0%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="01-复杂度3-二分查找-（函数题）"><a href="#01-复杂度3-二分查找-（函数题）" class="headerlink" title="01-复杂度3 二分查找 （函数题）"></a><strong>01-复杂度3 二分查找</strong> （函数题）</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>本题要求实现二分查找算法。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType X )</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>List</code>结构定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>L</code>是用户传入的一个线性表，其中<code>ElementType</code>元素可以通过&gt;、==、&lt;进行比较，并且题目保证传入的数据是递增有序的。函数<code>BinarySearch</code>要查找<code>X</code>在<code>Data</code>中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记<code>NotFound</code>。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NotFound 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">ReadInput</span><span class="params">()</span></span>; <span class="comment">/* 裁判实现，细节不表。元素从下标1开始存储 */</span></span><br><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType X )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line">    ElementType X;</span><br><span class="line">    Position P;</span><br><span class="line"></span><br><span class="line">    L = <span class="built_in">ReadInput</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">    P = <span class="built_in">BinarySearch</span>( L, X );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, P);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">12 31 55 89 101</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">26 78 233</span><br><span class="line">31</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position t = <span class="number">0</span>, l = <span class="number">1</span>, r = L-&gt;Last;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        t = (l+r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(X == L-&gt;Data[t])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; L-&gt;Data[t])</span><br><span class="line">        &#123;</span><br><span class="line">            l = t + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; L-&gt;Data[t])</span><br><span class="line">        &#123;</span><br><span class="line">            r = t - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NotFound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>简单的二分思想，设置一个temp不断寻找待查区间下标的中间值，与输入的数据比较，如果temp较大，则更新待查区间右端点为temp-1；若temp较小，则更新待查区间左端点为temp+1；若与temp相等，则返回temp，即该元素在线性表中的位置下标；若出现了待查区间左端点下标大于右端点下标的情况，则说明未在线性表中查找到该元素，返回NotFound。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构MOOC课后习题 01-复杂度2 Maximum Subsequence Sum</title>
      <link href="/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A62%20Maximum%20Subsequence%20Sum/"/>
      <url>/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A62%20Maximum%20Subsequence%20Sum/</url>
      
        <content type="html"><![CDATA[<h1 id="01-复杂度2-Maximum-Subsequence-Sum"><a href="#01-复杂度2-Maximum-Subsequence-Sum" class="headerlink" title="01-复杂度2 Maximum Subsequence Sum"></a><strong>01-复杂度2 Maximum Subsequence Sum</strong></h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>Given a sequence of <em>K</em> integers { <em>N</em><sub>1</sub>, <em>N</em><sub>2</sub>, …, <em>N</em><sub><em>K</em> </sub>}. A continuous subsequence is defined to be { <em>N</em><sub><em>i</em></sub>, <em>N</em><sub><em>i</em>+1</sub>, …, <em>N</em><sub><em>j</em> </sub> } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">int</span> MaxSum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> ThisSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = n, templeft = <span class="number">1</span>, tempright = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    tempright = i;</span><br><span class="line">    ThisSum += a[i];</span><br><span class="line">    <span class="keyword">if</span>(ThisSum &gt; MaxSum)&#123;</span><br><span class="line">    left = templeft;</span><br><span class="line">            right = tempright;</span><br><span class="line">    MaxSum = ThisSum;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(ThisSum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    ThisSum = <span class="number">0</span>;</span><br><span class="line">    templeft = i+<span class="number">1</span>;</span><br><span class="line">    tempright=i+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(MaxSum&lt;<span class="number">0</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; MaxSum &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[left] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;a [right] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这道题是上一道题的难度加大版，需要记录最大子列和首尾的数字，因此需要构建一个数组来存放数字序列以方便计数，注意这里有两个坑，测试时多次未AC。</p><p>① 如果序列全为负数时，要输出 ”0 序列首位数字 序列末尾数字“，如果序列中有0存在，其他数字均为负数时，则输出” 0 0 0 “。</p><p>② 如果存在多个并列的最大子列和，要输出下标更小的那一组。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构MOOC课后习题 01-复杂度1 最大子列和问题</title>
      <link href="/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A61%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84MOOC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%2001-%E5%A4%8D%E6%9D%82%E5%BA%A61%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="01-复杂度1-最大子列和问题"><a href="#01-复杂度1-最大子列和问题" class="headerlink" title="01-复杂度1 最大子列和问题"></a><strong>01-复杂度1 最大子列和问题</strong></h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>给定<em>K</em>个整数组成的序列{ <em>N</em><sub>1</sub>, <em>N</em><sub>2</sub>, …, <em>N</em><sub><em>K</em> </sub>}，“连续子列”被定义为{ <em>N</em><sub><em>i</em></sub>, <em>N</em><sub><em>i</em>+1</sub>, …, <em>N</em><sub><em>j</em> </sub>}，其中 1≤<em>i</em>≤<em>j</em>≤<em>K</em>。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。</p><p>本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：</p><ul><li>数据1：与样例等价，测试基本正确性；</li><li>数据2：10<sup>2</sup>个随机整数；</li><li>数据3：10<sup>3</sup>个随机整数；</li><li>数据4：10<sup>4</sup>个随机整数；</li><li>数据5：10<sup>5</sup>个随机整数；</li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第1行给出正整数<em>K</em> (≤100000)；第2行给出<em>K</em>个整数，其间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">-2 11 -4 13 -5 -2</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> maxsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> thissum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        thissum += n;</span><br><span class="line">        <span class="keyword">if</span>(thissum &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            thissum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(thissum &gt; maxsum)</span><br><span class="line">            &#123;</span><br><span class="line">                maxsum = thissum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxsum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用“在线处理”方法，设置两个变量，maxsum（最大子列和），thissum（当前自列和）。循环输入数列数字，加入thissum（当前子列和），一旦thissum的大小小于0就说明之后再加任何的数字都只能变小，此时将thissum置0，进入下一次循环。每次循环更新maxsum大小，最后循环结束，输出maxsum。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-023 输出GPLT</title>
      <link href="/2021/01/16/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-023%20%E8%BE%93%E5%87%BAGPLT/"/>
      <url>/2021/01/16/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-023%20%E8%BE%93%E5%87%BAGPLT/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-023-输出GPLT"><a href="#PTA团队天梯赛║L1-023-输出GPLT" class="headerlink" title="PTA团队天梯赛║L1-023  输出GPLT"></a>PTA团队天梯赛║L1-023  <strong>输出GPLT</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按<code>GPLTGPLT....</code>这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按<code>GPLT</code>的顺序打印，直到所有字符都被输出。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcTclnGloRgLrtLhgljkLhGFauPewSKgt</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPLTGPLTGLTGLGLL</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>先将输入的字符串全部转换为大写字母，然后对于GPLT四个字母计数，将每个字母出现的次数存放在a[4]中，然后按照顺序输出 <code>GPLT</code> ，每输出一个字母，该字母对应的计数减一，直到减为0。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;   <span class="comment">//存放GPLT出现次数</span></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">length</span>(); i++) <span class="comment">//将字符串全部转化为大写字母，并计数</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = <span class="built_in">toupper</span>(s[i]);</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;G&#x27;</span>) a[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;P&#x27;</span>) a[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;L&#x27;</span>) a[<span class="number">2</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;T&#x27;</span>) a[<span class="number">3</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">while</span>(a[<span class="number">0</span>]!=<span class="number">0</span> || a[<span class="number">1</span>]!=<span class="number">0</span> || a[<span class="number">2</span>]!=<span class="number">0</span> || a[<span class="number">3</span>]!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i]--;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;G&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;P&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;L&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>) cout &lt;&lt; <span class="string">&quot;T&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>利用了转换大写字母的函数 <em>toupper()</em> ，包含在头文件 <code>&lt;cctype&gt;</code> 中。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-020 帅到没朋友</title>
      <link href="/2021/01/14/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-020%20%E5%B8%85%E5%88%B0%E6%B2%A1%E6%9C%8B%E5%8F%8B/"/>
      <url>/2021/01/14/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-020%20%E5%B8%85%E5%88%B0%E6%B2%A1%E6%9C%8B%E5%8F%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-020-帅到没朋友"><a href="#PTA团队天梯赛║L1-020-帅到没朋友" class="headerlink" title="PTA团队天梯赛║L1-020 帅到没朋友"></a>PTA团队天梯赛║L1-020 <strong>帅到没朋友</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>当芸芸众生忙着在朋友圈中发照片的时候，总有一些人因为太帅而没有朋友。本题就要求你找出那些帅到没有朋友的人。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤100），是已知朋友圈的个数；随后<code>N</code>行，每行首先给出一个正整数<code>K</code>（≤1000），为朋友圈中的人数，然后列出一个朋友圈内的所有人——为方便起见，每人对应一个ID号，为5位数字（从00000到99999），ID间以空格分隔；之后给出一个正整数<code>M</code>（≤10000），为待查询的人数；随后一行中列出<code>M</code>个待查询的ID，以空格分隔。</p><p>注意：没有朋友的人可以是根本没安装“朋友圈”，也可以是只有自己一个人在朋友圈的人。虽然有个别自恋狂会自己把自己反复加进朋友圈，但题目保证所有<code>K</code>超过1的朋友圈里都至少有2个不同的人。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按输入的顺序输出那些帅到没朋友的人。ID间用1个空格分隔，行的首尾不得有多余空格。如果没有人太帅，则输出<code>No one is handsome</code>。</p><p>注意：同一个人可以被查询多次，但只输出一次。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">8</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333 88888</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000 88888 23333</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 11111 22222 55555</span><br><span class="line">2 33333 44444</span><br><span class="line">4 55555 66666 99999 77777</span><br><span class="line">4</span><br><span class="line">55555 44444 22222 11111</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No one is handsome</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>用一个大小为100000的整型数组存放朋友圈的人，将输入的ID作为下标，初始值均为0。检测如果朋友圈的人数大于一，就将该朋友圈内所有人ID下标的数字置为1。设置一个sum作为没朋友的总人数，检测是否帅的没朋友时，就检测该ID下标对应的数组元素是否为0，若是，则输出该ID，并且sum++。最后判断sum是否为0，若是，则证明没有帅到没朋友的人，输出 <code>No one is handsome</code> 。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n, k, m, K;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; m;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">1</span>) p[m] = <span class="number">1</span>; <span class="comment">//将有朋友的人做标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span>(p[m] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>, m);  <span class="comment">//保证输出格式正确</span></span><br><span class="line">            p[m] = <span class="number">-1</span>;  <span class="comment">//避免重复</span></span><br><span class="line">            sum += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No one is handsome&quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>第一次提交未得满分，发现是在输出时未控制格式，遇到诸如 <code>00038</code> 这样的ID会输出为 <code>38</code> ,后改进用<em>printf()</em> ，成功满分通过。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-019 谁先倒</title>
      <link href="/2021/01/14/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-019%20%E8%B0%81%E5%85%88%E5%80%92/"/>
      <url>/2021/01/14/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-019%20%E8%B0%81%E5%85%88%E5%80%92/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-019-谁先倒"><a href="#PTA团队天梯赛║L1-019-谁先倒" class="headerlink" title="PTA团队天梯赛║L1-019 谁先倒"></a>PTA团队天梯赛║L1-019 <strong>谁先倒</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><p>下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数<code>N</code>（≤100），随后<code>N</code>行，每行给出一轮划拳的记录，格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过100的正整数（两只手一起划）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在第一行中输出先倒下的那个人：<code>A</code>代表甲，<code>B</code>代表乙。第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">6</span><br><span class="line">8 10 9 12</span><br><span class="line">5 10 5 10</span><br><span class="line">3 8 5 12</span><br><span class="line">12 18 1 13</span><br><span class="line">4 16 12 15</span><br><span class="line">15 1 1 16</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>用两个变量存储甲乙的酒量，甲乙再分别用两个变量存储为喊和划的数字，循环 <strong>N</strong> 次，判断两人喊的数字之和与谁划的数字相同，则该人酒量数字减一，当酒量数字小于 <strong>0</strong> 时break，该人倒下输出名字，另一个人没倒的喝了多少杯可以用另一个人的酒量减去他剩余酒量。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> A,B;<span class="comment">//甲乙酒量</span></span><br><span class="line">cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line"><span class="keyword">int</span> a = A, b = B;<span class="comment">//a和b用来记录A与B何时倒 </span></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">0</span>, a2 = <span class="number">0</span>, b1 = <span class="number">0</span>, b2 = <span class="number">0</span>;<span class="comment">//甲喊 甲划 乙喊 乙划 </span></span><br><span class="line">cin &gt;&gt; N;</span><br><span class="line"><span class="keyword">while</span>(N--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; b1 &gt;&gt; b2; </span><br><span class="line"><span class="keyword">if</span>((a2 == a1+b1)&amp;&amp;(a2 != b2))<span class="comment">//A输掉一轮</span></span><br><span class="line">&#123;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((b2 == a1+b1)&amp;&amp;(a2 != b2))<span class="comment">//B输掉一轮</span></span><br><span class="line">&#123; </span><br><span class="line">b--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="comment">//A倒下</span></span><br><span class="line">&#123; </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A&quot;</span> &lt;&lt; endl &lt;&lt; B-b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b&lt;<span class="number">0</span>)<span class="comment">//B倒下</span></span><br><span class="line">&#123; </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; endl &lt;&lt; A-a;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>题目总体使用简单的 <em><strong>if</strong></em> 条件判断即可完成主要功能，逻辑清晰后代码并不难。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-017 到底有多二</title>
      <link href="/2021/01/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-017%20%E5%88%B0%E5%BA%95%E6%9C%89%E5%A4%9A%E4%BA%8C/"/>
      <url>/2021/01/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-017%20%E5%88%B0%E5%BA%95%E6%9C%89%E5%A4%9A%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-017-到底有多二"><a href="#PTA团队天梯赛║L1-017-到底有多二" class="headerlink" title="PTA团队天梯赛║L1-017 到底有多二"></a>PTA团队天梯赛║L1-017 <strong>到底有多二</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>一个整数“<strong>犯二的程度</strong>”定义为该数字中包含2的个数与其位数的比值。如果这个数是负数，则程度增加0.5倍；如果还是个偶数，则再增加1倍。例如数字<code>-13142223336</code>是个11位数，其中有3个2，并且是负数，也是偶数，则它的犯二程度计算为：3/11×1.5×2×100%，约为81.82%。本题就请你计算一个给定整数到底有多二。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个不超过50位的整数<code>N</code>。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出<code>N</code>犯二的程度，保留小数点后两位。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-13142223336</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81.82%</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>设置两个倍数标志 <code>fu</code> 和 <code>ou</code> 初始值均为 <strong>1</strong> ，用字符串存储输入的整数，先判断第一位是否为 <strong>’-‘</strong> ，若是负数，更新 <code>fu</code> 为 <strong>1.5</strong> ，并在计算字符串长度时减一，然后判断该整数是否为偶数，若是，更新 <code>ou</code> 为 <strong>2</strong> 。然后遍历字符串计数 <strong>’2‘</strong> 的个数，根据题目要求计算得出结果，结果输出保留两位小数。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">float</span> fu = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ou = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> two = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)     <span class="comment">//判断负数</span></span><br><span class="line">    &#123;</span><br><span class="line">        fu = <span class="number">1.5</span>;</span><br><span class="line">        len -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((s[s.<span class="built_in">length</span>()<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>)%<span class="number">2</span> == <span class="number">0</span>)  <span class="comment">//判断偶数</span></span><br><span class="line">    &#123;</span><br><span class="line">        ou = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">length</span>(); i++)     <span class="comment">//计数2的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            two += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = <span class="built_in"><span class="keyword">double</span></span>(two)/<span class="built_in"><span class="keyword">double</span></span>(len) * fu * ou * <span class="number">100</span>;  <span class="comment">//强制转换为双浮点型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f%\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>题目难度不大，但是要注意最后输出两位小数，计算是不能用整型，需要强制转换一下数据类型。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-015 跟奥巴马一起画方块</title>
      <link href="/2021/01/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-015%20%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%94%BB%E6%96%B9%E5%9D%97/"/>
      <url>/2021/01/13/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-015%20%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%94%BB%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-015-跟奥巴马一起画方块"><a href="#PTA团队天梯赛║L1-015-跟奥巴马一起画方块" class="headerlink" title="PTA团队天梯赛║L1-015 跟奥巴马一起画方块"></a>PTA团队天梯赛║L1-015 <strong>跟奥巴马一起画方块</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出正方形边长<em>N</em>（3≤<em>N</em>≤21）和组成正方形边的某种字符<code>C</code>，间隔一个空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出由给定字符<code>C</code>画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>题目关键在于控制输出，因为是整数除以2，所以四舍五入利用偶数直接除以，奇数将除以结果加一实现，然后用两层循环输出，内循环输出一行内所有字符，外循环输出空行保证有字符的行数是列数的50%。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, p;</span><br><span class="line">   <span class="keyword">char</span> c;</span><br><span class="line">   cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">   <span class="keyword">if</span>(n&lt;<span class="number">3</span> || n&gt;<span class="number">21</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) p = n/<span class="number">2</span>;  <span class="comment">//控制四舍五入</span></span><br><span class="line">   <span class="keyword">else</span> p = n/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;p; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">       &#123;</span><br><span class="line">           cout &lt;&lt; c;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>题目难度不大，掌握好行与列输出的关系比较容易解题。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-011 A-B</title>
      <link href="/2021/01/12/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-011%20A-B/"/>
      <url>/2021/01/12/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-011%20A-B/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-011-A-B"><a href="#PTA团队天梯赛║L1-011-A-B" class="headerlink" title="PTA团队天梯赛║L1-011 A-B"></a>PTA团队天梯赛║L1-011 A-B</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>本题要求你计算 <em>A</em>−<em>B</em> 。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串 <em>A</em>−<em>B</em> 。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love GPLT!  It&#x27;s a fun game!</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I lv GPLT!  It&#x27;s  fn gm!</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>设置一个flag，暴力循环比较a字符串的每一个字符是否与b字符串中的字符相同，如果发现相同，flag更新为false，最后用 <strong>if(flag)</strong> 控制输出a字符串</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    <span class="built_in">getline</span>(cin,a);</span><br><span class="line">    <span class="built_in">getline</span>(cin,b);</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">size_t</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">size_t</span> len2 = b.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; ++j)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span> (b[j] == a[i])</span><br><span class="line">&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>程序时间复杂度为O(n<sup>2</sup>),程序耗时很长<img src="https://img-blog.csdnimg.cn/20210303191915276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>网上看到柳诺大神巧妙的方法将时间复杂度降到O(n),思路与代码如下</p><blockquote><p><strong>分析：辣么多ASCII码也在0<del>255之间，所以用book数组标记所有的ASCII码～如果第二个字符出现了这个ACSII码那就标记为1</del>然后输出的时候当book数组对应的那个ASCII为1的时候就跳过不输出～</strong></p><p><em>引自<a href="https://www.liuchuo.net/archives/1597">https://www.liuchuo.net/archives/1597</a></em></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s, a;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="built_in">getline</span>(cin, a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++) book[a[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(book[s[i]] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        cout &lt;&lt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试点1和3耗时大为降低<img src="https://img-blog.csdnimg.cn/20210303191537645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-009 N个数求和</title>
      <link href="/2021/01/06/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-009%20N%E4%B8%AA%E6%95%B0%E6%B1%82%E5%92%8C/"/>
      <url>/2021/01/06/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-009%20N%E4%B8%AA%E6%95%B0%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p>本题的要求很简单，就是求<code>N</code>个数字的和。麻烦的是，这些数字是以有理数<code>分子/分母</code>的形式给出的，你输出的和也必须是有理数的形式。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数<code>N</code>（≤100）。随后一行按格式<code>a1/b1 a2/b2 ...</code>给出<code>N</code>个有理数。题目保证所有分子和分母都在长整型范围内。另外，负数的符号一定出现在分子前面。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出上述数字和的最简形式 —— 即将结果写成<code>整数部分 分数部分</code>，其中分数部分写成<code>分子/分母</code>，要求分子小于分母，且它们没有公因子。如果结果的整数部分为0，则只输出分数部分。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2/5 4/15 1/30 -2/60 8/3</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 1/3</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1/3 -1/6 1/8</span><br></pre></td></tr></table></figure><h3 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7/24</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>分数的和问题归根结底是通分时求最小公倍数和最大公因数的问题，将分子和分母分开进行运算，先求出所有分母的最小公倍数作为通分后的分母，然后求出通分后的分子之和，最后化简即可</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> a, <span class="keyword">long</span> <span class="keyword">int</span> b)</span>    <span class="comment">//求最大公因数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a%b==<span class="number">0</span> ? b : <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>]; <span class="comment">//存放输入的分子和分母</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> s1 = <span class="number">0</span>;     <span class="comment">//存放所有分数通分后的分子之和</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> s2 = <span class="number">1</span>;     <span class="comment">//存放当前分母最小的公倍数</span></span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d&quot;</span>, &amp;a[i],&amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s2 = b[<span class="number">0</span>];  <span class="comment">//将b[0]作为初始分母最小公倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)  <span class="comment">//求出分母的最小公倍数</span></span><br><span class="line">    &#123;</span><br><span class="line">        s2 = s2*b[i] / <span class="built_in">gcd</span>(s2,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)  <span class="comment">//求出通分后的分子之和</span></span><br><span class="line">    &#123;</span><br><span class="line">        s1 += s2/b[i] * a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> n = s1/s2; <span class="comment">//最后结果整数部分</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> m = <span class="built_in">abs</span>(s1%s2); <span class="comment">//余数</span></span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="comment">//结果为整数</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>)    <span class="comment">//n==0时不输出n</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1&lt;<span class="number">0</span>)    <span class="comment">//如果结果为负数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; m/<span class="built_in">gcd</span>(s2,m) &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; s2/<span class="built_in">gcd</span>(s2,m) &lt;&lt; endl;     <span class="comment">//将(分子/分母)化到最简</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><ol><li>由于输入时要输入分数，对于输入格式有要求，要求是 <code>a/b</code> 的格式，因此引入头文件 <code>#include &lt;stdio.h&gt;</code> ，利用C语言中 <em>scanf()</em> 实现更灵活的输入操作。</li><li>由于求最小公倍数还有主函数内多次要求最大公因数，因此在主函数前写一个求最大公因数的全局函数大大方便了后续的操作。</li><li>最后输出结果控制的时候，起初如果测试数据为负数总会输出错误，后发现是化简部分余数未保持正，因此解决方案是引入头文件 <code>#include &lt;cmath&gt;</code> 中 <em>abs()</em> 取绝对值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-008 求整数段和</title>
      <link href="/2021/01/06/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-008%20%E6%B1%82%E6%95%B4%E6%95%B0%E6%AE%B5%E5%92%8C/"/>
      <url>/2021/01/06/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-008%20%E6%B1%82%E6%95%B4%E6%95%B0%E6%AE%B5%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-008-求整数段和"><a href="#PTA团队天梯赛║L1-008-求整数段和" class="headerlink" title="PTA团队天梯赛║L1-008 求整数段和"></a>PTA团队天梯赛║L1-008 <strong>求整数段和</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>给定两个整数<em>A</em>和<em>B</em>，输出从<em>A</em>到<em>B</em>的所有整数以及这些数的和。</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出2个整数<em>A</em>和<em>B</em>，其中−100≤<em>A</em>≤<em>B</em>≤100，其间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先顺序输出从<em>A</em>到<em>B</em>的所有整数，每5个数字占一行，每个数字占5个字符宽度，向右对齐。最后在一行中按<code>Sum = X</code>的格式输出全部数字的和<code>X</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 8</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   -3   -2   -1    0    1</span><br><span class="line">    2    3    4    5    6</span><br><span class="line">    7    8</span><br><span class="line">Sum = 30</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>用循环打出两个数之间的所有整数较为简单，需要注意的是要按照题目要求控制打印的格式，可以使用C语言风格的 <em>printf()</em> 式样化规定字符较为方便控制输出。</p><blockquote><p>可以在“%”和字母之间插进数字表示最大<a href="https://baike.baidu.com/item/%E5%9C%BA%E5%AE%BD">场宽</a>。</p><p>例如：%3d表示输出3位整型数，不够3位右对齐。</p><p>%9.2f表示输出场宽为9的浮点数，其中小数位为2，整数位为6，</p><p>小数点占一位，不够9位右对齐。</p></blockquote><p>之后五个数字一换行，利用对5取余的办法控制。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a; i &lt; b+<span class="number">1</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,i); <span class="comment">//每个数字占5个字符宽度，向右对齐</span></span><br><span class="line">        sum += i;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span>(j%<span class="number">5</span> == <span class="number">0</span>) cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j%<span class="number">5</span> != <span class="number">0</span> ) &#123;cout &lt;&lt; endl;&#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>第一次提交只得了<strong>9</strong>分，提示格式错误扣了一分，查错发现原代码在输出最后的<code>Sum=</code>前直接输出了换行，如果要输出5的整数倍的数字，代码就会多出一空行，后加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(j%5 != 0 ) &#123;cout &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure><p>控制空行的输出，重新提交得到满分。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-007 念数字</title>
      <link href="/2021/01/05/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-007%20%E5%BF%B5%E6%95%B0%E5%AD%97/"/>
      <url>/2021/01/05/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-007%20%E5%BF%B5%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-007-念数字"><a href="#PTA团队天梯赛║L1-007-念数字" class="headerlink" title="PTA团队天梯赛║L1-007 念数字"></a>PTA团队天梯赛║L1-007 <strong>念数字</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出<code>fu</code>字。十个数字对应的拼音如下：</p><p>0: ling    1: yi    2: er    3: san    4: si    5: wu    6:liu    7:qi    8: ba    9: jiu</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个整数，如：<code>1234</code>。</p><p><strong>提示：整数包括负数、零和正数。</strong></p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如 <code>yi er san si</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-600</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fu liu ling ling</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>用户输入 <em>string</em> 类型数据，然后存放至 <em>char</em> 数组中，用 <em>switch</em> 判断输出相应位置的拼音</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; n.<span class="built_in">length</span>(); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[j] = n[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (a[i])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;fu&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;yi&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;er&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;san&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;si&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;wu&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;liu&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;qi&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;ba&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;jiu&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == n.<span class="built_in">length</span>() - <span class="number">1</span>) &#123;cout &lt;&lt; endl; <span class="keyword">break</span>;&#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>题目难度不大，但是一开始走了弯路，第一次想法为用 <em>int</em> 存储输入的整数，直接判断每一位上的数字较为麻烦复杂，因此改换为先使用 <em>string</em> 类型转存 <em>char</em> 数组的方式，更加简单快捷。主要实现功能部分用 <em>switch</em> 来实现。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-006 连续因子</title>
      <link href="/2021/01/04/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-006%20%E8%BF%9E%E7%BB%AD%E5%9B%A0%E5%AD%90/"/>
      <url>/2021/01/04/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-006%20%E8%BF%9E%E7%BB%AD%E5%9B%A0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-006-连续因子"><a href="#PTA团队天梯赛║L1-006-连续因子" class="headerlink" title="PTA团队天梯赛║L1-006 连续因子"></a>PTA团队天梯赛║L1-006 <strong>连续因子</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>一个正整数 <em>N</em> 的因子中可能存在若干连续的数字。例如 630 可以分解为 3×5×6×7，其中 5、6、7 就是 3 个连续的数字。给定任一正整数 <em>N</em>，要求编写程序求出最长连续因子的个数，并输出最小的连续因子序列。</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个正整数 <em>N</em>（1&lt;<em>N</em>&lt;231）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在第 1 行输出最长连续因子的个数；然后在第 2 行中按 <code>因子1*因子2*……*因子k</code> 的格式输出最小的连续因子序列，其中因子按递增顺序输出，1 不算在内。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">630</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5*6*7</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>根据N的值的取值范围小于等于2<sup>31</sup>，而这个值介于12的阶乘到13的阶乘之间，所以我们可以得到最大的值应该是12个数连续相乘，又因为1不计算在内，所以最多只要有11为连续因子即可。</p><p>用暴力的思想，我从2、3、4…sqrt(N)开始乘，连着乘以11位，10位，9位…以此类推。</p><p>即连续乘 <strong>11</strong> 位：</p><blockquote><p>2 3 4 5 6 7 8 9 10 11 12相乘</p><p>3 4 5 6 7 8 9 10 11 12 13相乘</p><p>…</p></blockquote><p>连续乘 <strong>10</strong> 位：</p><blockquote><p>2 3 4 5 6 7 8 9 10 11相乘</p><p>3 4 5 6 7 8 9 10 11 12相乘</p><p>…</p></blockquote><p>直到只有 <strong>1</strong> 位时，过程中只要有一个乘积 <strong>S</strong> 使得 <code>N%S==0</code>，就可以认为找到了连续因子。</p><p>为了优化代码，在每次乘的时候如果当前的乘积已经大于 <strong>N</strong> 了，就没有继续乘的必要了。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">sqrt</span>(N);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum;  <span class="comment">//注意数据类型！！</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">11</span>; len&gt;<span class="number">0</span>; len--)   <span class="comment">//用len控制连续因子个数，N最多只能到12阶乘</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n; i++) <span class="comment">//连续因子不包括1，从2开始乘，最多乘到N的开方就足够</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=i; j&lt;len+i; j++)    <span class="comment">//从当前的i开始，乘以的个数为len的长度</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum*=j;</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;N) <span class="keyword">break</span>;    <span class="comment">//到这就没有必要往下算了</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(N%sum==<span class="number">0</span>)    <span class="comment">//当前的sum值是N的一个因子</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; len &lt;&lt; endl &lt;&lt; i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;j; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; k;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p><img src="https://img-blog.csdnimg.cn/20210223221140638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NDkyMTE4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>v1.0最后两个测试点没有通过，还没有想通是哪里出现问题。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-005 考试座位号</title>
      <link href="/2021/01/01/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-005%20%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7/"/>
      <url>/2021/01/01/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-005%20%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-005-考试座位号"><a href="#PTA团队天梯赛║L1-005-考试座位号" class="headerlink" title="PTA团队天梯赛║L1-005 考试座位号"></a>PTA团队天梯赛║L1-005 <strong>考试座位号</strong></h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（≤1000），随后 <em>N</em> 行，每行给出一个考生的信息：<code>准考证号 试机座位号 考试座位号</code>。其中<code>准考证号</code>由 16 位数字组成，座位从 1 到 <em>N</em> 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p><p>考生信息之后，给出一个正整数 <em>M</em>（≤<em>N</em>），随后一行中给出 <em>M</em> 个待查询的试机座位号码，以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3310120150912233 2 4</span><br><span class="line">3310120150912119 4 1</span><br><span class="line">3310120150912126 1 3</span><br><span class="line">3310120150912002 3 2</span><br><span class="line">2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3310120150912002 2</span><br><span class="line">3310120150912119 1</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>利用结构体和 <em>vector</em> 容器结合，在输入的数据中找到符合条件的数据并输出。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span> <span class="comment">//创建一个结构体存储学生的准考证号以及试机和考试座位号</span></span><br><span class="line">    string num; <span class="comment">//准考证号</span></span><br><span class="line">    <span class="keyword">int</span> com1,com2; <span class="comment">//com1为试机座位号，com2为考试座位号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;   <span class="comment">//n为考生数，m为待查询的考生数目</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;stu&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].num &gt;&gt; a[i].com1 &gt;&gt; a[i].com2;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> src; <span class="comment">//待查询的试机座位号</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; src;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j].com1 == src)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; a[j].num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[j].com2 &lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>运用好 <em>vector</em> 容器后题目就变得较为简单了，题目难度不大。</p><p><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html"><em>vector</em> 简单的知识点</a></p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-004 计算摄氏温度</title>
      <link href="/2021/01/01/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-004%20%E8%AE%A1%E7%AE%97%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6/"/>
      <url>/2021/01/01/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-004%20%E8%AE%A1%E7%AE%97%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-004-计算摄氏温度"><a href="#PTA团队天梯赛║L1-004-计算摄氏温度" class="headerlink" title="PTA团队天梯赛║L1-004 计算摄氏温度"></a>PTA团队天梯赛║L1-004 计算摄氏温度</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>给定一个华氏温度<em>F</em>，本题要求编写程序，计算对应的摄氏温度<em>C</em>。计算公式：<em>C</em>=5×(<em>F</em>−32)/9。题目保证输入与输出均在整型范围内。</p></blockquote><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行中给出一个华氏温度。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中按照格式“Celsius = C”输出对应的摄氏温度C的整数值。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">150</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Celsius = 65</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>该题为最简单的根据公式数制转换，注意题目要求 <em>保证输入与输出均在整型范围内</em>。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f,c;</span><br><span class="line">    cin &gt;&gt; f;</span><br><span class="line">    c = <span class="number">5</span>*(f<span class="number">-32</span>)/<span class="number">9</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Celsius = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、反思总结"><a href="#四、反思总结" class="headerlink" title="四、反思总结"></a>四、反思总结</h2><p>题目有一些简单了，注意细心不要搞错输出时候的要求，以防检查测试不通过。</p>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-003 个位数统计</title>
      <link href="/2020/12/30/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-003%20%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1.md/"/>
      <url>/2020/12/30/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-003%20%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1.md/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-002-打印沙漏"><a href="#PTA团队天梯赛║L1-002-打印沙漏" class="headerlink" title="PTA团队天梯赛║L1-002 打印沙漏"></a>PTA团队天梯赛║L1-002 打印沙漏</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>给定一个 <em>k</em> 位整数 <em>N</em>=<em>d</em><sub>k−1</sub>10*<sup>k−1</sup><em>+⋯+<em>d</em><sub>1</sub>10<sup>1</sup>+<em>d</em><sub>0</sub> (0≤</em>d<sub>i</sub>*≤9, <em>i</em>=0,⋯,<em>k</em>−1, <em>d</em><sub>k−1</sub>&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 <em>N</em>=100311，则有 2 个 0，3 个 1，和 1 个 3。</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 <em>N</em>。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对 <em>N</em> 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 <em>N</em> 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>利用<strong>字符串</strong>解决该问题，首先以字符串的形式存储用户输入的数据，接着用一个0~9的字符数组存储各位上出现的数字次数，最后顺序输出字符数组中非零的数以及存储的出现次数。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) <span class="comment">//将输入数字的每一位数字所在的字符数组位置存储的次数加1</span></span><br><span class="line">    &#123;</span><br><span class="line">        num[s[i]-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="comment">//输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; num[i] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、问题反思"><a href="#四、问题反思" class="headerlink" title="四、问题反思"></a>四、问题反思</h2><ol><li>起初使用 <em>int</em> 和 <em>long</em> 类型去存储测试用例，无法满足题目1000位数字的要求，且操作过程较为复杂，后转用 <em>string</em> 类型操作既简单又准确。</li><li><em>string</em> 类型的字符串长度不能使用 <em>strlen()</em> 的方法获得，需要使用包装好string类里的函数方法 <em>string.lengtn()</em> 来获取长度。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA团队天梯赛║L1-002 打印沙漏</title>
      <link href="/2020/12/30/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-002%20%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
      <url>/2020/12/30/PTA%E5%9B%A2%E9%98%9F%E5%A4%A9%E6%A2%AF%E8%B5%9B%E2%95%91L1-002%20%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA团队天梯赛║L1-002-打印沙漏"><a href="#PTA团队天梯赛║L1-002-打印沙漏" class="headerlink" title="PTA团队天梯赛║L1-002 打印沙漏"></a>PTA团队天梯赛║L1-002 打印沙漏</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><blockquote><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line">***</span><br><span class="line">*</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指<strong>每行输出奇数个符号</strong>；各行<strong>符号中心对齐</strong>；<strong>相邻两行符号数差2</strong>；符号数先<strong>从大到小顺序递减到1</strong>，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p></blockquote><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>该题目为图形输出类的问题，关键是找到图形输出的规律，由题目找寻下述规律</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">沙漏形状行数必然是奇数(1,3,5,...,2x+1) //x=0,1,2,3,...</span><br><span class="line">行数为1时，符号数为1</span><br><span class="line">行数为3时，符号数为7，即1+2*3</span><br><span class="line">行数为5时，符号数为17，即1+2*3+2*5</span><br><span class="line">...</span><br><span class="line">行数为i时，符号数为1+2*3+2*5+...+2*i</span><br></pre></td></tr></table></figure><p>因此，先设置打印的沙漏层数 <em>level</em> 和 沙漏符号数 <em>hourglass</em> 为1(若用户输入符号数不为0，则至少可以打印一层沙漏)，用 while 循环累加 <em>level</em> 和 <em>hourglass</em> 直到能打印最多符号，最后先打印上半部分以及最中心的一个符号，再打印剩余部分的沙漏。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, level = <span class="number">1</span>; <span class="comment">//n为用户输入的符号数，level为打印的沙漏层数</span></span><br><span class="line">    <span class="keyword">int</span> hourglass = <span class="number">1</span>; <span class="comment">//沙漏符号数</span></span><br><span class="line">    <span class="keyword">char</span> c; <span class="comment">//用户输入的符号</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n / hourglass) <span class="comment">//累加寻找能打印的最大沙漏</span></span><br><span class="line">    &#123;</span><br><span class="line">        level += <span class="number">2</span>; <span class="comment">//层数上下各加一层</span></span><br><span class="line">        hourglass += <span class="number">2</span> * level; <span class="comment">//沙漏符号数也增加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//while循环最后一次多加了一次要减去</span></span><br><span class="line">    hourglass -= <span class="number">2</span>*level; <span class="comment">//注意两个算式顺序不能调换</span></span><br><span class="line">    level -= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印上半个沙漏</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; level/<span class="number">2</span> + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k &lt; i; k++) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span> ;m &lt; level<span class="number">-2</span>*i;m++) cout &lt;&lt; c;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印下半个沙漏</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=level/<span class="number">2</span>; i &gt;<span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k &lt; i<span class="number">-1</span>; k++) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span> ;m &lt; level<span class="number">-2</span>*(i<span class="number">-1</span>); m++) cout &lt;&lt; c;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - hourglass &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、问题反思"><a href="#四、问题反思" class="headerlink" title="四、问题反思"></a>四、问题反思</h2><ol><li>在while循环寻找能打印的最大沙漏时，最后减去多加的两层时算数顺序不能调换，第一次因为调换了两个算式顺序导致打印出的沙漏出错。</li><li>打印上半个沙漏时第一次尝试未将最中间一层考虑进去，将问题复杂化了。</li><li>做完打印沙漏部分却遗漏了最后一步输出剩下未使用的符号数，得意忘形，粗心大意了，以后做题中谨记戒骄戒躁，认真阅读题目，做完题后检查一下是否完成全部要求。</li></ol><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> PTA刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
